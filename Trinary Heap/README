Tom Nguyen
01/24/17
CSE 373
TA: Raquel Van Hofwegen
HW #2

1) To test my program, I made a test client code file. I added a toString() method in order to assist with debugging/testing. I tested each function in my code, testing for when the intention of the code was performed when the case was presented to it, ie. throwing an EmptyHeapException error when calling findMin/deleteMin when the heap was empty. In addition to this, I also created a heap by hand on paper and drew the heap that the code produced and made sure they were equivalent. Most of the meaningful parts of the test code I have included is also commented with explanations and reasoning why I did what I did. 

2) buildQueue: O(n) because I have implemented Floyd's Method, which turns the O(log n) runtime of percolateDown to a negligible constant factor.
   isEmpty: O(1) because you are returning a boolean of if size is 0.
   size: O(1) because you are returning the size counter.
   insert: O(log n) because you will worst case have to percolate up all the way up the tree and that will be log n times.
   findMin: O(1) because you are just returning the head of the heap.
   deleteMin: O(log n) because you must percolate the last value in the heap downwards, and that will be an O(log n) worst case from percolating all the way back down to a leaf position.

3)
    a) The outer for loop begins from n and decrements to 0 but the loop will break when the loop counter is divisible by 5 (irrelevant because we want the worst case), so its worst case runtime is O(n). The nested for loop is upper bounded by n but it doubles each iteration, which indicates an O(logn) runtime. Multiply these together and get an overall asymptotic runtime of O(nlogn).
    b) The outer loop begins at 0 and increments up to n. So its runtime is O(n). Then the nested loop begins at 0 and increments up to (n * (n + 1) / 3) which can be asymptotically simplified to O(n^2) runtime. Then by multiplying the nested loop runtime by the outer loop's runtime, we get an overal asymptotic runtime of O(n^3).
    c) The overall runtime of the program fragment is O(n^2). The outer loop starts at 0 and increments until it is upperbounded by n so it is an O(n) process. Then the process within the outer loop calls another method which contains a loop that also starts at 0 and increments until its upperbound of n, making it an O(n) runtime as well. Multiply these together to get an overall asymptotic runtime of O(n^2).

4) 
	a) 
	calculateMax {
		make a max set to zero
		for 0 to array.length - 1 {
			store the value at current array index
			for 1 to array.length - 1 {
				subtract the stored value with each other index
				if the subtraction is greater than max then reassign max
			}
		}
		return max
	}
	b) 
	calculateMax {
		make a min set to 0
		make a max set to 0
		for 0 to array.length - 1 {
			find the min and max
		}
		return max - min
	}
	c) In general, no but you could if the input arrays always only consist of 2 elements.

	calculateMax {
		return the absolute value of the first index - second index
	}

5) 
	a) O(n) because there are 5 total number of operations and 4 of those are O(log n) and 1 is an O(n) operation. A total asymptotic operation cost will be O(n). Ammortized runtime = O(n) / 5 = O(n). Instead of increasing the storage by a contant of 5 each time the storage is full, my implementation increases the array by a proportional constant of 2.
	b) O(log n) because there are 1.5n total number of operations and 1.5n - 1 of those are O(log n) and 1 of those is O(n). A total asymptotic operation cost of O(nlog n). Ammortized runtime = O(nlog n) / 1.5n = O(log n). My imlementation doubles the array size instead of scaling by a proportional constant of 1.5.
	c) O(log n) because there are 2n total number of operations and 2n - 1 of those are O(log n) runtime and 1 operation of O(n) runtime. A total asymptotic runtime of O(nlog n). Ammortized runtime = O(nlog n) / 2n = O(log n). This is the exact scheme that my implementation does. Once the storage array is full, a new array will be made and will be scaled by 2 times the size of the previous array.

6) I believe that I was able to implement Floyd's Method into my buildQueue method.
